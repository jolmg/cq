#!/bin/bash

# cq: query your CSVs with SQL
# Copyright (C) 2019  Jorge Luis Martinez Gomez
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

VERSION=1.0.0

csv_assignments=()
output_headers=1
input_mode=csv
output_mode=csv

usage() {
  cat <<EOF
Usage:
  $0 [-H] [-i <input_mode>] [-o <output_mode>] [<table_assignment> ...] [-q <sql_query>]

$0 is a wrapper over sqlite to facilitate ad-hoc querying of relational
data. table_assignments come in 3 forms:
  
  Prefix assignment: <table_name>:=<file_path>

    This particularly useful for when file_path comes from something long
    like:

      $0 \\
        t:=<(ssh some_server produce_some_csv) \\
        t:=<(ssh another_server generate_a_different_csv)

  Suffix Assignment: <file_path>=:<table_name>

    Useful when combined with brace expansion:
      
      $0 a/very/deep/path/{long_foo=:f,another/long_bar=:b}

  Implicit Assignment: <file_path>

    Table names will be the result of taking the basename of the path and
    removing a .csv extension if present. For when you have your ad-hoc
    "database" in a directory and you just want to glob:

      $0 deep/path/again/*

Option descriptions:

  -H +H --headers --no-headers
    Indicates sqlite to add or remove the headers from the output. Last
    takes precedence.

  -i --input-mode
    Specifies the mode of the input. Supported modes can be seen by
    running: \`sqlite3 <<< '.help mode'\`

  -o --output-mode
    Specifies the mode of the output. Supported modes can be seen by
    running: \`sqlite3 <<< '.help mode'\`

  -q --query
    Should be the query you want to do on that data. The reason why this is
    a flag instead of a positional argument is so that it can be put either
    before or after the table assignments.
EOF
}

while (( $# )); do
  case $1 in
    -q|--query)
      query="$2"
      shift
    ;;

    -v|--version)
      printf "%s\n" $VERSION
      exit
    ;;

    -h|--help)
      usage
      exit
    ;;

    [-+]H|--headers|--no-headers)
      if [[ $1 = -H || $1 = --headers ]]; then
        output_headers=1
      else
        output_headers=
      fi
    ;;

    -i|--input-mode)
      input_mode="$2"
      shift
    ;;

    -o|--output-mode)
      output_mode="$2"
      shift
    ;;

    *)
      csv_assignments+=("$1")
    ;;
  esac
  shift
done

if [[ "${#csv_assignments}" -eq 0 ]]; then
  csv_assignments+=("t:=-")
fi

(
  printf ".mode %s\n" "$input_mode"
  if [[ $output_headers ]]; then
    echo ".headers on"
  fi
  for csv_assignment in "${csv_assignments[@]}"; do
    if [[ "$csv_assignment" = *:=* ]]; then
      table_name="${csv_assignment%%:=*}"
      file_name="${csv_assignment#*:=}"
    elif [[ "$csv_assignment" = *=:* ]]; then
      file_name="${csv_assignment%=:*}"
      table_name="${csv_assignment##*=:}"
    else
      file_name="$csv_assignment"
      table_name="$(
        basename "${csv_assignment%.csv}" \
        | sed 's/[^A-Za-z0-9_]/_/g'
      )"
    fi
    if [[ $file_name = - ]]; then
      file_name="/proc/$$/fd/0"
    fi
    printf ".import %s %s\n" "$file_name" "$table_name"
  done
  printf ".mode %s\n" "$output_mode"
  printf "%s\n" "$query"
) | sqlite3
